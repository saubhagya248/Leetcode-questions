class Solution {
    public static int[] nextSmallerOnLeftIdx(int[] arr, int n)
{ 
    int[] ans = new int[n];
    Stack<Integer> st = new Stack<>(); 
	
    for(int i = n - 1; i >= 0; i--) {
    	while(st.size() > 0 && arr[i] < arr[st.peek()]) {
    		ans[st.peek()] = i;
    		st.pop();
    	}
    	st.push(i);
    }
    
    while(st.size() > 0) {
    	ans[st.peek()] = -1;
    	st.pop();
    }
    return ans;
}

public static int[] nextSmallerOnRightIdx(int[] arr, int n) { 
    int[] ans = new int[n];
    Stack<Integer> st = new Stack<>(); 
	
    for(int i = 0; i < n; i++) {
    	while(st.size() > 0 && arr[i] <= arr[st.peek()]) {
    		ans[st.peek()] = i;
    		st.pop();
    	}
    	st.push(i);
    }
    
    while(st.size() > 0) {
    	ans[st.peek()] = n;
    	st.pop();
    }
    return ans;
}
    public int sumSubarrayMins(int[] a) {
        int n = a.length;
        int smleft[] = nextSmallerOnLeftIdx(a,n);
		int smright[] = nextSmallerOnRightIdx(a,n);

		long ans = 0;
		long M = 1000000007;
		for(int i=0;i<n;i++){
			long num = (long)(i-smleft[i])*(long)(smright[i]-i);
			long temp = ((num%M)*(a[i]%M))%M;
			ans = ((ans%M)+(temp%M)%M);
		}
		return (int)ans;
    }
}
