class Solution {
    public int[] nge(int nums[]){
        Stack<Integer> st = new Stack<>();
        int nge[] = new int[nums.length];

        for(int i=0;i<nums.length;i++){
            while(st.size()>0 && nums[i]>nums[st.peek()]){
                nge[st.peek()] = i;
                st.pop();
            }
            st.push(i);
        }
        while(st.size()>0){
            nge[st.peek()] = nums.length;
            st.pop();
        }
        return nge;
    }
    public int[] maxSlidingWindow(int[] nums, int k) {
        int nge[] = nge(nums);
        int j=0;
        int ans[] = new int[(nums.length-k)+1];
        int ansi=0;
        for(int i=0;i<=nums.length-k;i++){
            if(j<i){
                j=i;
            }
            while(nge[j]<i+k){
                j=nge[j];
            }
            ans[ansi] = nums[j];
            ansi++;
        }

        return ans;
    }
}
