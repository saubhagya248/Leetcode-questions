/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    ListNode oh=null;
    ListNode ot=null;
    ListNode th=null;
    ListNode tt=null;
    public void addFirst(ListNode nn){
        if(th==null){
            th = nn;
            tt = nn;
        }
        else{
            nn.next = th;
            th = nn;
        }
    }
    public int getSize(ListNode head){
        ListNode curr = head;
        int len=0;
        while(curr!=null){
            len++;
            curr=curr.next;
        }
        return len;
    }
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode curr = head;

        int size = getSize(head);
        while(size>=k){
            int K=k;
            

            while(K-- > 0){
                ListNode noc = curr.next;
                addFirst(curr);
                curr = noc;

                size--;
                
            }
            
            if(oh==null){
                oh=th;
                ot=tt;
            }
            else{
                ot.next=th;
                ot=tt;
            }

            th=null;
            tt=null;
        }

        ot.next=curr;
        return oh;
    }
}
